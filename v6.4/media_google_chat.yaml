zabbix_export:
  version: '6.4'
  media_types:
    - name: 'Google Chat'
      type: WEBHOOK
      parameters:
        - name: alert_message
          value: '{ALERT.MESSAGE}'
        - name: alert_subject
          value: '{ALERT.SUBJECT}'
        - name: event_date
          value: '{EVENT.DATE}'
        - name: event_id
          value: '{EVENT.ID}'
        - name: event_nseverity
          value: '{EVENT.NSEVERITY}'
        - name: event_opdata
          value: '{EVENT.OPDATA}'
        - name: event_recovery_date
          value: '{EVENT.RECOVERY.DATE}'
        - name: event_recovery_time
          value: '{EVENT.RECOVERY.TIME}'
        - name: event_severity
          value: '{EVENT.SEVERITY}'
        - name: event_source
          value: '{EVENT.SOURCE}'
        - name: event_status
          value: '{EVENT.STATUS}'
        - name: event_tags
          value: '{EVENT.TAGS}'
        - name: event_time
          value: '{EVENT.TIME}'
        - name: event_update_action
          value: '{EVENT.UPDATE.ACTION}'
        - name: event_update_date
          value: '{EVENT.UPDATE.DATE}'
        - name: event_update_message
          value: '{EVENT.UPDATE.MESSAGE}'
        - name: event_update_status
          value: '{EVENT.UPDATE.STATUS}'
        - name: event_update_time
          value: '{EVENT.UPDATE.TIME}'
        - name: event_update_user
          value: '{USER.FULLNAME}'
        - name: event_value
          value: '{EVENT.VALUE}'
        - name: host_ip
          value: '{HOST.IP}'
        - name: host_name
          value: '{HOST.NAME}'
        - name: google_endpoint
          value: '<PLACE WEBHOOK URL HERE>'
        - name: group_messages_by_thread
          value: '{EVENT.ID}'
        - name: http_to_https_redirect_service
          value: 'https://www.google.com/url?q='
        - name: trigger_description
          value: '{TRIGGER.DESCRIPTION}'
        - name: trigger_id
          value: '{TRIGGER.ID}'
        - name: trigger_url
          value: '{TRIGGER.URL}'
        - name: use_default_message
          value: 'false'
        - name: zabbix_url
          value: '{$ZABBIX.URL}'
      script: |
        var SEVERITY_COLORS = [
            '#97AAB3', // Not classified.
            '#7499FF', // Information.
            '#FFC859', // Warning.
            '#FFA059', // Average.
            '#E97659', // High.
            '#E45959', // Disaster.
            '#009900', // Resolved.
            '#000000', // Default.
            '#2E9BF6'  // Update.
        ];

        // Google Chat does not allow insecure URLs (http://).
        // If the URL is not secure, this function adds a URL as a prefix for secure redirection.
        function getHttpsUrl(url) {
            if (params.http_to_https_redirect_service
                 && params.http_to_https_redirect_service.startsWith('https:')
                 && url.startsWith('http:')) {
                url = params.http_to_https_redirect_service + encodeURIComponent(url);
            }
        
            return url;
        }
        
        try {
            var params = JSON.parse(value);
        
            if (typeof params.google_endpoint !== 'string' || params.google_endpoint.trim() === '') {
                throw 'Cannot get google_endpoint';
            }
            else if (!params.google_endpoint.startsWith('http')) {
                throw 'Invalid Google Chat webhook URL: ' + params.google_endpoint;
            }

            if (!params.zabbix_url.startsWith('http')) {
                throw 'Zabbix URL Macro is invalid or not defined: ' + params.zabbix_url;
            }
        
            params.zabbix_url = (params.zabbix_url.endsWith('/'))
                ? params.zabbix_url.slice(0, -1) : params.zabbix_url;
        
            if ([0, 1, 2, 3, 4].indexOf(parseInt(params.event_source)) === -1) {
                throw 'Incorrect "event_source" parameter given: "' + params.event_source + '".\nMust be 0-4.';
            }
        
            // Set "use_default_message" to true for non trigger-based events.
            if (params.event_source !== '0') {
                params.use_default_message = 'true';
            }
        
            // Check {EVENT.VALUE} for trigger-based and internal events.
            if (params.event_value !== '0' && params.event_value !== '1'
                    && (params.event_source === '0' || params.event_source === '3')) {
                throw 'Incorrect "event_value" parameter given: "' + params.event_value + '".\nMust be 0 or 1.';
            }
        
            // Check {EVENT.UPDATE.STATUS} only for trigger-based events.
            if (params.event_update_status !== '0' && params.event_update_status !== '1' && params.event_source === '0') {
                throw 'Incorrect "event_update_status" parameter given: "' + params.event_update_status + '".\nMust be 0 or 1.';
            }
        
            if (params.event_value == 0) {
                params.event_nseverity = '6';
            }
        
            if (!SEVERITY_COLORS[params.event_nseverity]) {
                params.event_nseverity = '7';
            }
        
            var request = new HttpRequest(),
                text_widgets = [],
                body = {
                  cardsV2: [
                    {
                      cardId: 'zabbix-event',
                      card: {
                        sections: [
                          {
                            header: '<font color="' + SEVERITY_COLORS[params.event_nseverity] + '">' + params.alert_subject.replace(/\*/g, '') + '</font>',
                            widgets: []
                          },
                          {
                            widgets: [
                              {
                                buttonList: {
                                  buttons: [
                                    {
                                      text: (params.event_source === '0')
                                          ? 'Event Info'
                                          : 'Zabbix Home',
                                      onClick: {
                                        openLink: {
                                          url: (params.event_source === '0')
                                              ? getHttpsUrl(params.zabbix_url + '/tr_events.php?triggerid=' +
                                                  params.trigger_id + '&eventid=' + params.event_id)
                                              : getHttpsUrl(params.zabbix_url)
                                        }
                                      }
                                    }
                                ]}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                };
        
            if (params.use_default_message.toLowerCase() !== 'true') {
                // Problem message.
                if (params.event_value === '1' && params.event_update_status === '0') {
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Event time',
                        text: params.event_time + ' ' + params.event_date
                    }});
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Host',
                        text: params.host_name + ' [' + params.host_ip + ']'
                    }});
                }
                // Update message.
                else if (params.event_update_status === '1') {
                    params.event_nseverity = '8';
                    body.cardsV2[0].card.sections[0].header += '<br><font color="' + SEVERITY_COLORS[params.event_nseverity] + '">' + params.event_update_user + ' ' + params.event_update_action + '.';
        
                    if (params.event_update_message) {
                        body.cardsV2[0].card.sections[0].header += '<br>Message:<br>' + params.event_update_message + '</font>';
                    }
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Event update time',
                        text: params.event_update_time + ' ' + params.event_update_date
                    }});
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Host',
                        text: params.host_name + ' [' + params.host_ip + ']'
                    }});
                }
                // Resolved message.
                else {
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Recovery time',
                        text: params.event_recovery_time + ' ' + params.event_recovery_date
                    }});
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Host',
                        text: params.host_name + ' [' + params.host_ip + ']'
                    }});
                }

                if (params.event_severity && params.event_severity !== '{EVENT.SEVERITY}') {
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Severity',
                        text: params.event_severity
                    }});
                }
        
                if (params.event_opdata && params.event_opdata !== '{EVENT.OPDATA}') {
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Operational data',
                        text: params.event_opdata
                    }});
                }

                if (params.trigger_description && params.trigger_description !== '{TRIGGER.DESCRIPTION}') {
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Trigger Description',
                        text: params.trigger_description
                    }});
                }
        
                if (params.event_tags && params.event_tags !== '{EVENT.TAGS}') {
                    text_widgets.push({ decoratedText: {
                        topLabel: 'Event tags',
                        text: params.event_tags
                    }});
                }

                if (params.trigger_url && params.trigger_url.startsWith('http')) {
                    body.cardsV2[0].card.sections[1].widgets[0].buttonList.buttons.push({
                        text: 'Trigger URL',
                        onClick: {
                            openLink:
                              {
                                  url: getHttpsUrl(params.trigger_url)
                              }
                        }
                    }); 
                }
        
                Object.keys(params)
                    .forEach(function (key) {
                        if (key.startsWith('label_') && params[key] !== '') {
                            text_widgets.push({ decoratedText: {
                                topLabel: key.substring(6),
                                text: params[key]
                            }});
                        }
                        else if (key.startsWith('openUri_') && params[key] !== '' && !params[key].startsWith('{')) {
                            body.cardsV2[0].card.sections[1].widgets[0].buttonList.buttons.push({
                                text: key.substring(8),
                                onClick: {
                                  openLink:
                                    {
                                        url: getHttpsUrl(params[key])
                                    }
                                }
                            });
                        }
                    });
                body.cardsV2[0].card.sections[0].widgets = text_widgets;
                body.cardsV2[0].card.sections[0].header = body.cardsV2[0].card.sections[0].header.replace(/(?:\r\n|\r|\n)/g, '<br>');
            }
            else {
                body = { "text": params.alert_subject + '\r\n' + params.alert_message };
            }

            if (params.group_messages_by_thread && params.group_messages_by_thread.toLowerCase() !== 'false') {
                body.thread = {"thread_key": params.event_id};
                params.google_endpoint += '&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD';
            }
        
            request.addHeader('Content-Type: application/json; charset=UTF-8');
        
            if (typeof params.HTTPProxy === 'string' && params.HTTPProxy !== '') {
                request.setProxy(params.HTTPProxy);
            }
        
            Zabbix.log(4, '[ Google Chat Webhook ] JSON: ' + JSON.stringify(body));
        
            var response = request.post(params.google_endpoint, JSON.stringify(body));
        
            Zabbix.log(4, '[ Google Chat Webhook ] Response: ' + response);
        
            if (request.getStatus() != 200) {
                Zabbix.log(4, '[ Google Chat Webhook ] FAILED with code ' + request.getStatus() + ', response: ' + response);
                throw response;
            }
            else {
                return 'OK';
            }
        }
        catch (error) {
            Zabbix.log(3, '[ Google Chat Webhook ] ERROR: ' + error);
            throw 'Sending failed: ' + error;
        }
      description: |
        v0.1.0 - Zabbix 6.4
        https://github.com/thiagomdiniz/zabbix-google-chat-webhook
      message_templates:
        - event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: '*Problem: {EVENT.NAME}*'
          message: |
            Problem started at `{EVENT.TIME}` on `{EVENT.DATE}`
            Problem name: `{EVENT.NAME}`
            Host: `{HOST.NAME}`
            Severity: `{EVENT.SEVERITY}`
            Operational data: `{EVENT.OPDATA}`
            Original problem ID: `{EVENT.ID}`
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: '*Resolved: {EVENT.NAME}*'
          message: |
            Problem has been resolved in `{EVENT.DURATION}` at `{EVENT.RECOVERY.TIME}` on `{EVENT.RECOVERY.DATE}`
            Problem name: `{EVENT.NAME}`
            Host: `{HOST.NAME}`
            Severity: `{EVENT.SEVERITY}`
            Original problem ID: `{EVENT.ID}`
            {TRIGGER.URL}
        - event_source: TRIGGERS
          operation_mode: UPDATE
          subject: '*Updated problem: {EVENT.NAME}*'
          message: |
            `{USER.FULLNAME}` `{EVENT.UPDATE.ACTION}` problem at `{EVENT.UPDATE.DATE}` `{EVENT.UPDATE.TIME}`.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is `{EVENT.STATUS}`, acknowledged: `{EVENT.ACK.STATUS}`.
        - event_source: DISCOVERY
          operation_mode: PROBLEM
          subject: '*Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}*'
          message: |
            Discovery rule: `{DISCOVERY.RULE.NAME}`
            
            Device IP: `{DISCOVERY.DEVICE.IPADDRESS}`
            Device DNS: `{DISCOVERY.DEVICE.DNS}`
            Device status: `{DISCOVERY.DEVICE.STATUS}`
            Device uptime: `{DISCOVERY.DEVICE.UPTIME}`
            
            Device service name: `{DISCOVERY.SERVICE.NAME}`
            Device service port: `{DISCOVERY.SERVICE.PORT}`
            Device service status: `{DISCOVERY.SERVICE.STATUS}`
            Device service uptime: `{DISCOVERY.SERVICE.UPTIME}`
        - event_source: AUTOREGISTRATION
          operation_mode: PROBLEM
          subject: '*Autoregistration: {HOST.HOST}*'
          message: |
            Host name: `{HOST.HOST}`
            Host IP: `{HOST.IP}`
            Agent port: `{HOST.PORT}`
        - event_source: SERVICE
          operation_mode: PROBLEM
          subject: '*Service "{SERVICE.NAME}" problem: {EVENT.NAME}*'
          message: |
            Service problem started at `{EVENT.TIME}` on `{EVENT.DATE}`
            Service problem name: `{EVENT.NAME}`
            Service: `{SERVICE.NAME}`
            Severity: `{EVENT.SEVERITY}`
            Original problem ID: `{EVENT.ID}`
            Service description: `{SERVICE.DESCRIPTION}`
            
            `{SERVICE.ROOTCAUSE}`
        - event_source: SERVICE
          operation_mode: RECOVERY
          subject: '*Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}*'
          message: |
            Service `{SERVICE.NAME}` has been resolved at `{EVENT.RECOVERY.TIME}` on `{EVENT.RECOVERY.DATE}`
            Problem name: `{EVENT.NAME}`
            Problem duration: `{EVENT.DURATION}`
            Severity: `{EVENT.SEVERITY}`
            Original problem ID: `{EVENT.ID}`
            Service description: `{SERVICE.DESCRIPTION}`
        - event_source: SERVICE
          operation_mode: UPDATE
          subject: '*Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}*'
          message: |
            Changed `{SERVICE.NAME}` service status to `{EVENT.UPDATE.SEVERITY}` at `{EVENT.UPDATE.DATE}` `{EVENT.UPDATE.TIME}`.
            Current problem age is `{EVENT.AGE}`.
            Service description: `{SERVICE.DESCRIPTION}`
            
            `{SERVICE.ROOTCAUSE}`
